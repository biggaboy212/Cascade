local types = require ("@types")

return function (self, properties: types.RowProperties): types.Row
    --// Imports
    local creator = require ("@modules/creator")
    local binder = require ("@modules/binder")

    --// References
    local create = creator.Create

    --// Variables
    local parent = self.__container or self.__instance or self
    local structures = {}

    --// UI
    properties = properties or {}

    structures.Body = binder.Apply (
        properties,
        create ("Frame") ({
            Name = "Row",
            AutomaticSize = Enum.AutomaticSize.Y,
            BackgroundColor3 = Color3.fromRGB (255, 255, 255),
            BackgroundTransparency = 1,
            BorderColor3 = Color3.fromRGB (0, 0, 0),
            BorderSizePixel = 0,
            Size = UDim2.fromScale (1, 0),
            Parent = parent,

            create ("Frame") ({
                Name = "LeftAccessory",
                AutomaticSize = Enum.AutomaticSize.Y,
                BackgroundColor3 = Color3.fromRGB (255, 255, 255),
                BackgroundTransparency = 1,
                BorderColor3 = Color3.fromRGB (0, 0, 0),
                BorderSizePixel = 0,
                Size = UDim2.fromScale (0, 1),

                create ("UIListLayout") ({
                    Name = "UIListLayout",
                    FillDirection = Enum.FillDirection.Horizontal,
                    HorizontalAlignment = Enum.HorizontalAlignment.Left,
                    Padding = UDim.new (0, 10),
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    VerticalAlignment = Enum.VerticalAlignment.Center,
                    Wraps = true,
                }),

                create ("UIPadding") ({
                    Name = "UIPadding",
                    PaddingBottom = UDim.new (0, 10),
                    PaddingRight = UDim.new (0, 10),
                    PaddingTop = UDim.new (0, 10),
                }),
            }),

            create ("Frame") ({
                Name = "RightAccessory",
                AnchorPoint = Vector2.new (1, 0),
                AutomaticSize = Enum.AutomaticSize.XY,
                BackgroundColor3 = Color3.fromRGB (255, 255, 255),
                BackgroundTransparency = 1,
                BorderColor3 = Color3.fromRGB (0, 0, 0),
                BorderSizePixel = 0,
                LayoutOrder = 1,
                Position = UDim2.fromScale (1, 0),
                Size = UDim2.fromScale (0, 1),

                create ("UIListLayout") ({
                    Name = "UIListLayout",
                    FillDirection = Enum.FillDirection.Horizontal,
                    HorizontalAlignment = Enum.HorizontalAlignment.Right,
                    Padding = UDim.new (0, 10),
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    VerticalAlignment = Enum.VerticalAlignment.Center,
                    Wraps = true,
                }),

                create ("UIPadding") ({
                    Name = "UIPadding",
                    PaddingBottom = UDim.new (0, 10),
                    PaddingLeft = UDim.new (0, 11),
                    PaddingTop = UDim.new (0, 10),
                }),
            }),

            create ("Folder") ({
                Name = "LayoutIgnore",

                create ("Frame") ({
                    Name = "Divider",
                    AnchorPoint = Vector2.new (0, 1),
                    BorderColor3 = Color3.fromRGB (0, 0, 0),
                    BorderSizePixel = 0,
                    Position = UDim2.fromScale (0, 1),
                    Size = UDim2.new (1, 0, 0, 1),
                    Visible = false,

                    __dynamicKeys = {
                        BackgroundColor3 = self.Theme.Controls.ViewBorder[1],
                        BackgroundTransparency = self.Theme.Controls.ViewBorder[2],
                    },
                }),
            }),
        })
    ) :: Frame

    --// Initialize
    structures.LeftAccessories =
        structures.Body:FindFirstChild ("LeftAccessory") :: Frame
    structures.RightAccessories =
        structures.Body:FindFirstChild ("RightAccessory") :: Frame

    local function updateAccessories ()
        local parentWidth = structures.LeftAccessories.Parent.AbsoluteSize.X
        local rightWidth = structures.RightAccessories.AbsoluteSize.X

        local minLeftWidth = 75
        local calculatedLeftWidth =
            math.max (parentWidth - rightWidth, minLeftWidth)

        if parentWidth - rightWidth < minLeftWidth then
            structures.LeftAccessories.Size = UDim2.new (0, minLeftWidth, 1, 0)
        else
            structures.LeftAccessories.Size =
                UDim2.new (0, calculatedLeftWidth, 1, 0)
        end
    end

    updateAccessories ()
    structures.RightAccessories
        :GetPropertyChangedSignal ("AbsoluteSize")
        :Connect (updateAccessories)
    structures.LeftAccessories.Parent
        :GetPropertyChangedSignal ("AbsoluteSize")
        :Connect (updateAccessories)

    local object = binder.Wrap (properties, {
        SearchIndex = function (value: string)
            structures.Body:SetAttribute ("SearchIndex", value)
        end,
    }, structures.Body)

    object.Type = "Row"
    object.Theme = self.Theme
    object.Structures = structures
    object.Left = function ()
        local newObject = table.clone (object)

        newObject.__container = structures.LeftAccessories

        return newObject
    end
    object.Right = function ()
        local newObject = table.clone (object)

        newObject.__container = structures.RightAccessories

        return newObject
    end

    binder.Apply (properties, object)

    return object
end
