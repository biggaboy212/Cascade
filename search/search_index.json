{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Welcome to the official API documentation for the Cascade UI Library. You can use these docs as reference to build interfaces with the Cascade API, or use it as a reference for your own UI Library.</p>"},{"location":"#getting-started","title":"Getting started","text":"<ul> <li>Importing the Library</li> <li>Creating an Application</li> <li>Example</li> </ul>"},{"location":"#supporting-the-project","title":"Supporting the project","text":"<p>If you'd like to support the project, consider donating via any of these:</p> <ul> <li>LTC: <code>Lcd6pCPiVw9GH2MAaGkR8TX39EtL2LzFoa</code></li> <li>SOL: <code>EfwivXazedEw2kL2et92NKDkT3qrQ6pdxA8Bs7RKYRuN</code></li> <li>ETH: <code>0x85C09A302CBB42a321E737E6E4dDAC0Eebc4ac3E</code></li> <li>BTC: <code>bc1qlhym0f0lejwlhd47gext8g7fgej366j7z85vvx</code></li> </ul>"},{"location":"Components/","title":"Base Component","text":"<p><code>BaseComponent</code> is the base class from which all Cascade components inherit. It provides core fields such as <code>Type</code>, <code>Theme</code>, and <code>Structures</code>.</p>"},{"location":"Components/#summary","title":"Summary","text":""},{"location":"Components/#properties","title":"Properties","text":"Property Type Description <code>Type</code> <code>string</code> [Read-only] Defines the Component's class. <code>Theme</code> <code>string</code> [Read-only] Inherited theme from the calling component. <code>Structures</code> <code>{[string]: Instance?}</code> [Read-only] Table of defined component structures. <p>Warning</p> <p>Note that to access a component's actual instance, you will need to index <code>__instance</code> on it, this will return the actual roblox object instead of a merged metatable with the custom object.</p>"},{"location":"Components/#types","title":"Types","text":"<pre><code>export type BaseComponent = {\n    Type: string,\n    Theme: Theme,\n    Structures: { [string]: Instance | { any } },\n}\n</code></pre>"},{"location":"Components/Button/","title":"Button","text":""},{"location":"Components/Button/#button","title":"Button","text":"<p>A <code>Button</code> initiates an instantaneous action.</p> <p></p>"},{"location":"Components/Button/#summary","title":"Summary","text":""},{"location":"Components/Button/#properties","title":"Properties","text":"Property Type Description <code>State</code> <code>(\"Primary\" | \"Secondary\" | \"Destructive\")?</code> Determines the weight of the button. Suggests to the user it's impact to the content around it <code>Label</code> <code>string?</code> The text content of the button. <p>View all inherited from <code>BaseComponent</code></p> <p>View all inherited from <code>TextButton</code></p>"},{"location":"Components/Button/#methods","title":"Methods","text":"<p>View all inherited from <code>TextButton</code></p>"},{"location":"Components/Button/#events","title":"Events","text":"Event Signature Description <code>Pushed</code> <code>((self: Button) -&gt; unknown)?</code> A callback function that is triggered when the button has been fully clicked or tapped. <p>View all inherited from <code>TextButton</code></p>"},{"location":"Components/Button/#types","title":"Types","text":"<pre><code>type ButtonProperties = TextButton &amp; {\n    State: (\"Primary\" | \"Secondary\" | \"Destructive\")?,\n    Label: string?,\n    Pushed: ((self: Button) -&gt; unknown)?,\n}\n\ntype Button = BaseComponent &amp; Components &amp; ButtonProperties\n</code></pre>"},{"location":"Components/Button/#function-signature","title":"Function Signature","text":"<pre><code>function(self, properties: ButtonProperties): Button\n</code></pre>"},{"location":"Components/Button/#example","title":"Example","text":"<pre><code>local button = row:Right():Button({\n    Label = \"Button\",\n    State = \"Primary\",\n    Pushed = function(self)\n        print(\"Pushed\")\n    end,\n})\n\nprint(button:IsA(\"TextButton\")) --&gt; true\nprint(button.ClassName) --&gt; \"TextButton\"\nprint(button.Type) --&gt; \"Button\"\n</code></pre>"},{"location":"Components/Form/","title":"Form","text":"<p>A <code>Form</code> is a vertical container that organizes interface elements into clearly separated rows, using consistent styling like dividers to emphasize structure.</p>"},{"location":"Components/Form/#summary","title":"Summary","text":""},{"location":"Components/Form/#properties","title":"Properties","text":"<p>View all inherited from <code>BaseComponent</code></p> <p>View all inherited from <code>Frame</code></p>"},{"location":"Components/Form/#methods","title":"Methods","text":"<p>View all inherited from <code>Frame</code></p>"},{"location":"Components/Form/#events","title":"Events","text":"<p>View all inherited from <code>Frame</code></p>"},{"location":"Components/Form/#types","title":"Types","text":"<pre><code>type FormProperties = Frame\n\ntype Form = BaseComponent &amp; Components &amp; FormProperties\n</code></pre>"},{"location":"Components/Form/#function-signature","title":"Function Signature","text":"<pre><code>function(self, properties: FormProperties): Form\n</code></pre>"},{"location":"Components/Form/#example","title":"Example","text":"<pre><code>local form = section:Form()\n\nprint(form:IsA(\"Frame\")) --&gt; true\nprint(form.ClassName) --&gt; \"Frame\"\nprint(form.Type) --&gt; \"Form\"\n</code></pre>"},{"location":"Components/HStack/","title":"HStack","text":"<p>A <code>HStack</code> is a frame that horizontally sorts content.</p>"},{"location":"Components/HStack/#summary","title":"Summary","text":""},{"location":"Components/HStack/#properties","title":"Properties","text":"Property Type Description <code>Padding</code> <code>UDim?</code> The padding between objects. <code>HorizontalAlignment</code> <code>Enum.HorizontalAlignment?</code> The content X axis alignment. <code>VerticalAlignment</code> <code>Enum.VerticalAlignment?</code> The content Y axis alignment. <p>View all inherited from <code>BaseComponent</code></p> <p>View all inherited from <code>Frame</code></p>"},{"location":"Components/HStack/#methods","title":"Methods","text":"<p>View all inherited from <code>Frame</code></p>"},{"location":"Components/HStack/#events","title":"Events","text":"<p>View all inherited from <code>Frame</code></p>"},{"location":"Components/HStack/#types","title":"Types","text":"<pre><code>type StackProperties = Frame &amp; {\n    Padding: UDim?,\n    HorizontalAlignment: Enum.HorizontalAlignment?,\n    VerticalAlignment: Enum.VerticalAlignment?,\n}\n\ntype Stack = BaseComponent &amp; Components &amp; StackProperties\n</code></pre>"},{"location":"Components/HStack/#function-signature","title":"Function Signature","text":"<pre><code>function(self, properties: StackProperties): Stack\n</code></pre>"},{"location":"Components/HStack/#example","title":"Example","text":"<pre><code>local hStack = row:Right():HStack()\n\nprint(hStack:IsA(\"Frame\")) --&gt; true\nprint(hStack.ClassName) --&gt; \"Frame\"\nprint(hStack.Type) --&gt; \"HStack\"\n</code></pre>"},{"location":"Components/KeybindField/","title":"KeybindField","text":"<p>A <code>KeybindField</code> is a rectangular area in which people can enter and store <code>Enum.KeyCode</code> <code>InputObject</code>'s, then trigger a callback after pressing the stored KeyCode</p> <p></p>"},{"location":"Components/KeybindField/#summary","title":"Summary","text":""},{"location":"Components/KeybindField/#properties","title":"Properties","text":"Property Type Description <code>Placeholder</code> <code>string?</code> The text placeholder to instruct users on how to interact with the component. <code>Value</code> <code>Enum.Keycode?</code> The default shortcut the <code>KeybindField</code> is bound to. <p>View all inherited from <code>BaseComponent</code></p> <p>View all inherited from <code>Frame</code></p>"},{"location":"Components/KeybindField/#methods","title":"Methods","text":"<p>View all inherited from <code>Frame</code></p>"},{"location":"Components/KeybindField/#events","title":"Events","text":"Event Signature Description <code>BindPressed</code> <code>((self: KeybindField, value: Enum.KeyCode, inputComplete: boolean, gameProcessedEvent: boolean) -&gt; unknown)?</code> A Callback function that is triggered when the <code>Value</code> KeyCode has been pressed. <code>ValueChanged</code> <code>((self: KeybindField, value: Enum.KeyCode) -&gt; unknown)?</code> A Callback function that is triggered when the <code>Value</code> property has been modified. <p>View all inherited from <code>Frame</code></p>"},{"location":"Components/KeybindField/#types","title":"Types","text":"<pre><code>type KeybindFieldProperties = Frame &amp; {\n    Placeholder: string?,\n    Value: Enum.KeyCode?,\n    BindPressed: ((\n        self: KeybindField,\n        value: Enum.KeyCode,\n        inputComplete: boolean,\n        gameProcessedEvent: boolean\n    ) -&gt; unknown)?,\n    ValueChanged: ((self: KeybindField, value: Enum.KeyCode) -&gt; unknown)?,\n}\n\ntype KeybindField = BaseComponent &amp; Components &amp; KeybindFieldProperties\n</code></pre>"},{"location":"Components/KeybindField/#function-signature","title":"Function Signature","text":"<pre><code>function(self, properties: KeybindFieldProperties): KeybindField\n</code></pre>"},{"location":"Components/KeybindField/#example","title":"Example","text":"<pre><code>local keybindField = row:Right():KeybindField({\n    ValueChanged = function(self, value: Enum.KeyCode)\n        print(\"Value changed:\", value)\n    end,\n    BindPressed = function(\n        self,\n        value: Enum.KeyCode,\n        inputComplete: boolean,\n        gameProcessedEvent: boolean\n    )\n        if not inputComplete or gameProcessedEvent then\n            return\n        end\n\n        print(\"Pressed bind:\", value)\n    end,\n})\n\nprint(keybindField:IsA(\"Frame\")) --&gt; true\nprint(keybindField.ClassName) --&gt; \"Frame\"\nprint(keybindField.Type) --&gt; \"KeybindField\"\n\nkeybindField.Value = Enum.KeyCode.Z --&gt; Value changed: Enum.KeyCode.Z\n</code></pre>"},{"location":"Components/Label/","title":"Label","text":"<p>A <code>Label</code> is a static piece of text that people can read, but not edit.</p> <p></p>"},{"location":"Components/Label/#summary","title":"Summary","text":""},{"location":"Components/Label/#properties","title":"Properties","text":"<p>View all inherited from <code>BaseComponent</code></p> <p>View all inherited from <code>TextLabel</code></p>"},{"location":"Components/Label/#methods","title":"Methods","text":"<p>View all inherited from <code>TextLabel</code></p>"},{"location":"Components/Label/#events","title":"Events","text":"<p>View all inherited from <code>TextLabel</code></p>"},{"location":"Components/Label/#types","title":"Types","text":"<pre><code>type LabelProperties = TextLabel\n\ntype Label = BaseComponent &amp; Components &amp; FormProperties\n</code></pre>"},{"location":"Components/Label/#function-signature","title":"Function Signature","text":"<pre><code>function(self, properties: LabelProperties): Label\n</code></pre>"},{"location":"Components/Label/#example","title":"Example","text":"<pre><code>local label = row:Right():Label({\n    Text = \"Label\"\n})\n\nprint(label:IsA(\"TextLabel\")) --&gt; true\nprint(label.ClassName) --&gt; \"TextLabel\"\nprint(label.Type) --&gt; \"Label\"\n</code></pre>"},{"location":"Components/PageSection/","title":"PageSection","text":"<p>A <code>PageSection</code> separates content in a page into digestible sections via a Title stack. For example, a settings page might have:</p> <ul> <li>Appearance</li> <li>Input</li> <li>Effects</li> </ul> <p></p>"},{"location":"Components/PageSection/#summary","title":"Summary","text":""},{"location":"Components/PageSection/#properties","title":"Properties","text":"Property Type Description <code>Title</code> <code>string?</code> The section's title. <code>Subtitle</code> <code>string?</code> The section's sub-title. If left nil, the subtitle will be non-visible. <p>View all inherited from <code>BaseComponent</code></p> <p>View all inherited from <code>Frame</code></p>"},{"location":"Components/PageSection/#methods","title":"Methods","text":"<p>View all inherited from <code>Frame</code></p>"},{"location":"Components/PageSection/#events","title":"Events","text":"<p>View all inherited from <code>Frame</code></p>"},{"location":"Components/PageSection/#types","title":"Types","text":"<pre><code>type PageSectionProperties = Frame &amp; {\n    Title: string?,\n    Subtitle: string?,\n}\n\ntype PageSection = BaseComponent &amp; Components &amp; PageSectionProperties\n</code></pre>"},{"location":"Components/PageSection/#function-signature","title":"Function Signature","text":"<pre><code>function(self, properties: PageSectionProperties): PageSection\n</code></pre>"},{"location":"Components/PageSection/#example","title":"Example","text":"<pre><code>local pageSection = tab:PageSection({\n    Title = \"Effects\",\n    Subtitle = \"These effects may be resource intensive across different systems.\",\n})\n\nprint(pageSection:IsA(\"Frame\")) --&gt; true\nprint(pageSection.ClassName) --&gt; \"Frame\"\nprint(pageSection.Type) --&gt; \"PageSection\"\n</code></pre>"},{"location":"Components/PopUpButton/","title":"PopUpButton","text":"<p>A <code>PopUpbutton</code> displays a menu of mutually exclusive options.</p> <p></p>"},{"location":"Components/PopUpButton/#summary","title":"Summary","text":""},{"location":"Components/PopUpButton/#properties","title":"Properties","text":"Property Type Description <code>Options</code> <code>{[number]: string}?</code> You can use this table to pre-define options. Note that doing it this way will not give you access to the option instances themselves. <code>Value</code> <code>number?</code> The numeric index of the option to be selected. <p>View all inherited from <code>BaseComponent</code></p> <p>View all inherited from <code>Frame</code></p>"},{"location":"Components/PopUpButton/#methods","title":"Methods","text":"Method Signature Description <code>Option</code> <code>(Name: string?) -&gt; Frame</code> Can be used to seperately create options, use this if you want to access the option instances themselves. An example of use would be a dynamically updating playerlist. <code>Remove</code> <code>(Index: number?) -&gt; nil,</code> Can be used to remove options from the pop-up menu, this automatically removes it from the options list as well. <p>View all inherited from <code>Frame</code></p>"},{"location":"Components/PopUpButton/#events","title":"Events","text":"Event Signature Description <code>ValueChanged</code> <code>((self: PopUpButton, value: string) -&gt; unknown)?</code> A Callback function that is triggered when the <code>Value</code> property has been modified. <p>View all inherited from <code>Frame</code></p>"},{"location":"Components/PopUpButton/#types","title":"Types","text":"<pre><code>type PopUpButtonProperties = Frame &amp; {\n    Options: { [number]: string }?,\n    Expanded: boolean?,\n    Value: number?,\n    ValueChanged: ((self: PopUpButton, value: number) -&gt; unknown)?,\n}\n\ntype PopUpButton = BaseComponent &amp; Components &amp; PopUpButtonProperties &amp; {\n    Option: (Name: string?) -&gt; Frame,\n    Remove: (Index: number?) -&gt; nil,\n}\n</code></pre>"},{"location":"Components/PopUpButton/#function-signature","title":"Function Signature","text":"<pre><code>function(self, properties: PopUpButtonProperties): PopUpButton\n</code></pre>"},{"location":"Components/PopUpButton/#example","title":"Example","text":"<pre><code>local popUpButton = row:Right():PopUpButton({\n    Options = {\n        \"Item One\",\n        \"Item Two\",\n    },\n    ValueChanged = function(self, value: number)\n        print(\"Value changed:\", self.Options[value])\n    end,\n})\n\nprint(popUpButton:IsA(\"Frame\")) --&gt; true\nprint(popUpButton.ClassName) --&gt; \"Frame\"\nprint(popUpButton.Type) --&gt; \"PopUpButton\"\n\npopUpButton.Value = 3 --&gt; Value changed: \"Item Three\"\n\nlocal itemThree = popUpButton:Option(\"Item Three\")\n\nprint(itemThree.ClassName) --&gt; Frame\npopUpButton:Remove(13)\n</code></pre>"},{"location":"Components/PullDownButton/","title":"PullDownButton","text":"<p>A <code>PullDownButton</code> displays a menu of mutually exclusive options.</p> <p></p>"},{"location":"Components/PullDownButton/#summary","title":"Summary","text":""},{"location":"Components/PullDownButton/#properties","title":"Properties","text":"Property Type Description <code>Options</code> <code>{[number]: string}?</code> You can use this table to pre-define options. Note that doing it this way will not give you access to the option instances themselves. <code>Value</code> <code>number?</code> The numeric index of the option to be selected. <p>View all inherited from <code>BaseComponent</code></p> <p>View all inherited from <code>Frame</code></p>"},{"location":"Components/PullDownButton/#methods","title":"Methods","text":"Method Signature Description <code>Option</code> <code>(Name: string?) -&gt; Frame</code> Can be used to seperately create options, use this if you want to access the option instances themselves. <code>Remove</code> <code>(Index: number?) -&gt; nil,</code> Can be used to remove options from the pull-down menu, this automatically removes it from the options list as well. <p>View all inherited from <code>Frame</code></p>"},{"location":"Components/PullDownButton/#events","title":"Events","text":"Event Signature Description <code>ValueChanged</code> <code>((self: PullDownButton, value: string) -&gt; unknown)?</code> A Callback function that is triggered when the <code>Value</code> property has been modified. <p>View all inherited from <code>Frame</code></p>"},{"location":"Components/PullDownButton/#types","title":"Types","text":"<pre><code>type PullDownButtonProperties = Frame &amp; {\n    Options: { [number]: string }?,\n    Expanded: boolean?,\n    Label: string?,\n    Value: number?,\n    ValueChanged: ((self: PullDownButton, value: number) -&gt; unknown)?,\n}\n\ntype PullDownButton = BaseComponent &amp; Components &amp; PullDownButtonProperties &amp; {\n    Option: (Name: string?) -&gt; Frame,\n    Remove: (Index: number?) -&gt; nil,\n}\n</code></pre>"},{"location":"Components/PullDownButton/#function-signature","title":"Function Signature","text":"<pre><code>function(self, properties: PullDownButtonProperties): PullDownButton\n</code></pre>"},{"location":"Components/PullDownButton/#example","title":"Example","text":"<pre><code>local pullDownButton = row:Right():PullDownButton({\n    Options = {\n        \"Action One\",\n        \"Action Two\",\n    },\n    ValueChanged = function(self, value: number)\n        print(\"Action selected:\", self.Options[value])\n    end,\n})\n\nprint(pullDownButton:IsA(\"Frame\")) --&gt; true\nprint(pullDownButton.ClassName) --&gt; \"Frame\"\nprint(pullDownButton.Type) --&gt; \"PullDownButton\"\n\npullDownButton.Value = 3 --&gt; Value changed: \"Item Three\"\n\nlocal itemThree = pullDownButton:Option(\"Item Three\")\n\nprint(itemThree.ClassName) --&gt; Frame\npullDownButton:Remove(13)\n</code></pre>"},{"location":"Components/RadioButtonGroup/","title":"RadioButtonGroup","text":"<p>A <code>RadioButtonGroup</code> lets people choose an option from a set of mutually exclusive choices, using a circular indicator to show the selected option.</p> <p></p>"},{"location":"Components/RadioButtonGroup/#summary","title":"Summary","text":""},{"location":"Components/RadioButtonGroup/#properties","title":"Properties","text":"Property Type Description <code>Options</code> <code>{[number]: string}?</code> You can use this table to pre-define options. Note that doing it this way will not give you access to the option instances themselves. <code>Value</code> <code>number?</code> The numeric index of the option to be selected. <p>View all inherited from <code>BaseComponent</code></p> <p>View all inherited from <code>Frame</code></p>"},{"location":"Components/RadioButtonGroup/#methods","title":"Methods","text":"Method Signature Description <code>Option</code> <code>(Name: string?) -&gt; Frame</code> Can be used to seperately create options, use this if you want to access the option instances themselves. An example of use would be a dynamically updating playerlist. <p>View all inherited from <code>Frame</code></p>"},{"location":"Components/RadioButtonGroup/#events","title":"Events","text":"Event Signature Description <code>ValueChanged</code> <code>((self: RadioButtonGroup, value: string) -&gt; unknown)?</code> A Callback function that is triggered when the <code>Value</code> property has been modified. <p>View all inherited from <code>Frame</code></p>"},{"location":"Components/RadioButtonGroup/#types","title":"Types","text":"<pre><code>type RadioButtonGroupProperties = Frame &amp; {\n    Options: {[number]: string}?,\n    Value: number?,\n    ValueChanged: ((self: RadioButtonGroup, value: number) -&gt; unknown)?,\n}\n\ntype RadioButtonGroup = BaseComponent &amp; Components &amp; RadioButtonGroupProperties &amp; {\n    Option: (Name: string?) -&gt; Frame,\n}\n</code></pre>"},{"location":"Components/RadioButtonGroup/#function-signature","title":"Function Signature","text":"<pre><code>function(self, properties: RadioButtonGroupProperties): RadioButtonGroup\n</code></pre>"},{"location":"Components/RadioButtonGroup/#example","title":"Example","text":"<pre><code>local radioButtonGroup = row:Right():RadioButtonGroup({\n    Options = {\n        \"Option 1\",\n        \"Option 2\",\n    },\n    ValueChanged = function(self, value: number)\n        print(\"Value changed:\", self.Options[value])\n    end,\n})\n\nprint(radioButtonGroup:IsA(\"Frame\")) --&gt; true\nprint(radioButtonGroup.ClassName) --&gt; \"Frame\"\nprint(radioButtonGroup.Type) --&gt; \"RadioButtonGroup\"\n\nradioButtonGroup.Value = 2 --&gt; Value changed: \"Option 2\"\n\nlocal option3 = radioButtonGroup:Option(\"Option 3\")\n\nprint(option3.ClassName) --&gt; Frame\nradioButtonGroup.Value = 3 --&gt; Value changed: \"Option 3\"\n</code></pre>"},{"location":"Components/Row/","title":"Row","text":"<p>A <code>Row</code> is a horizontal container that splits its contents into <code>Left</code> and <code>Right</code> sections, providing a clear visual distinction between primary and secondary elements.</p>"},{"location":"Components/Row/#summary","title":"Summary","text":""},{"location":"Components/Row/#properties","title":"Properties","text":"Property Type Description <code>SearchIndex</code> <code>string?</code> A string that determines what the user has to type in to show this row in their search query <p>View all inherited from <code>BaseComponent</code></p> <p>View all inherited from <code>Frame</code></p>"},{"location":"Components/Row/#methods","title":"Methods","text":"Method Signature Description <code>Left</code> <code>() -&gt; Row</code> Returns a shallow clone of <code>Row</code> with the container set to the row's left container. <code>Right</code> <code>() -&gt; Row</code> Returns a shallow clone of <code>Row</code> with the container set to the row's right container. <p>View all inherited from <code>Frame</code></p>"},{"location":"Components/Row/#events","title":"Events","text":"<p>View all inherited from <code>Frame</code></p>"},{"location":"Components/Row/#types","title":"Types","text":"<pre><code>type RowProperties = Frame &amp; {\n    SearchIndex: string?,\n}\n\ntype Row = BaseComponent &amp; Components &amp; RowProperties &amp; {\n    Left: (self: Row) -&gt; Row,\n    Right: (self: Row) -&gt; Row,\n}\n</code></pre>"},{"location":"Components/Row/#function-signature","title":"Function Signature","text":"<pre><code>function(self, properties: RowProperties): Row\n</code></pre>"},{"location":"Components/Row/#example","title":"Example","text":"<pre><code>local row = section:Row({\n    SearchIndex = \"Cool Row\"\n})\n\nprint(row:IsA(\"Frame\")) --&gt; true\nprint(row.ClassName) --&gt; \"Frame\"\nprint(row.Type) --&gt; \"Row\"\n</code></pre>"},{"location":"Components/Section/","title":"Section","text":"<p>A <code>Section</code> organizes sidebar content by grouping related tabs together with optional disclosure.</p> <p></p>"},{"location":"Components/Section/#summary","title":"Summary","text":""},{"location":"Components/Section/#properties","title":"Properties","text":"Property Type Description <code>Title</code> <code>string?</code> The displayed section title. <code>Disclosure</code> <code>boolean?</code> Whether the section's content should be hideable. Defaults to false. <code>Expanded</code> <code>boolean?</code> Whether the section should be expanded by default. Defaults to true. <p>View all inherited from <code>BaseComponent</code></p> <p>View all inherited from <code>Frame</code></p>"},{"location":"Components/Section/#methods","title":"Methods","text":"<p>View all inherited from <code>Frame</code></p>"},{"location":"Components/Section/#events","title":"Events","text":"<p>View all inherited from <code>Frame</code></p>"},{"location":"Components/Section/#types","title":"Types","text":"<pre><code>type SectionProperties = Frame &amp; {\n    Title: string?,\n    Disclosure: boolean?,\n    Expanded: boolean?,\n}\n\ntype Section = BaseComponent &amp; Components &amp; SectionProperties\n</code></pre>"},{"location":"Components/Section/#function-signature","title":"Function Signature","text":"<pre><code>function(self, properties: SectionProperties): Section\n</code></pre>"},{"location":"Components/Section/#example","title":"Example","text":"<pre><code>local section = window:Section({\n    Disclosure = true,\n    Title = \"Settings\",\n})\n\nprint(section:IsA(\"Frame\")) --&gt; true\nprint(section.ClassName) --&gt; \"Frame\"\nprint(section.Type) --&gt; \"Section\"\n</code></pre>"},{"location":"Components/Slider/","title":"Slider","text":"<p>A <code>Slider</code> is a horizontal track with a control, called a thumb, that people can adjust between a minimum and maximum value.</p> <p></p>"},{"location":"Components/Slider/#summary","title":"Summary","text":""},{"location":"Components/Slider/#properties","title":"Properties","text":"Property Type Description <code>Minimum</code> <code>number?</code> The minimum value the slider can go. <code>Maximum</code> <code>number?</code> The maximum value the slider can reach. <code>Value</code> <code>number?</code> The slider's current value. <p>View all inherited from <code>BaseComponent</code></p> <p>View all inherited from <code>ImageLabel</code></p>"},{"location":"Components/Slider/#methods","title":"Methods","text":"<p>View all inherited from <code>ImageLabel</code></p>"},{"location":"Components/Slider/#events","title":"Events","text":"Event Signature Description <code>ValueChanged</code> <code>((self: Slider, value: number) -&gt; unknown)?</code> A Callback function that is triggered when the <code>Value</code> property has been modified. <p>View all inherited from <code>ImageLabel</code></p>"},{"location":"Components/Slider/#types","title":"Types","text":"<pre><code>type SliderProperties = ImageLabel &amp; {\n    Minimum: number?,\n    Maximum: number?,\n    Value: number?,\n    ValueChanged: ((self: Slider, value: number) -&gt; unknown)?,\n}\n\ntype Slider = BaseComponent &amp; Components &amp; SliderProperties\n</code></pre>"},{"location":"Components/Slider/#function-signature","title":"Function Signature","text":"<pre><code>function(self, properties: SliderProperties): Slider\n</code></pre>"},{"location":"Components/Slider/#example","title":"Example","text":"<pre><code>local slider = row:Right():Slider({\n    Minimum = 0,\n    Maximum = 10\n    Value = 5,\n    ValueChanged = function(self, value: number)\n        print(\"Value changed:\", value)\n    end,\n})\n\nprint(slider:IsA(\"ImageLabel\")) --&gt; true\nprint(slider.ClassName) --&gt; \"ImageLabel\"\nprint(slider.Type) --&gt; \"Slider\"\n\nslider.Value += 1 --&gt; Value changed: 6\n</code></pre>"},{"location":"Components/Stepper/","title":"Stepper","text":"<p>A <code>Stepper</code> is a two-segment control that people use to increase or decrease an incremental value.</p> <p></p>"},{"location":"Components/Stepper/#summary","title":"Summary","text":""},{"location":"Components/Stepper/#properties","title":"Properties","text":"Property Type Description <code>Minimum</code> <code>number?</code> The minimum value the stepper can drop. <code>Maximum</code> <code>number?</code> The maximum value the stepper can reach. <code>Step</code> <code>number?</code> The increment to increase by on increase/decrease. <code>Fielded</code> <code>boolean?</code> Whether the stepper should be attached to a editable field. Defaults to false. <code>Value</code> <code>number?</code> The stepper's current value. <p>View all inherited from <code>BaseComponent</code></p> <p>View all inherited from <code>ImageLabel</code></p>"},{"location":"Components/Stepper/#methods","title":"Methods","text":"Method Signature Description <code>Increment</code> <code>() -&gt; nil</code> This increments the <code>Value</code> of the stepper by the given step number. <code>Decrement</code> <code>() -&gt; nil</code> This decrements the <code>Value</code> of the stepper by the given step number. <p>View all inherited from <code>ImageLabel</code></p>"},{"location":"Components/Stepper/#events","title":"Events","text":"Event Signature Description <code>ValueChanged</code> <code>((self: Stepper, value: number) -&gt; unknown)?</code> A Callback function that is triggered when the <code>Value</code> property has been modified. <p>View all inherited from <code>ImageLabel</code></p>"},{"location":"Components/Stepper/#types","title":"Types","text":"<pre><code>type StepperProperties = ImageLabel &amp; {\n    Minimum: number?,\n    Maximum: number?,\n    Step: number?,\n    Fielded: boolean?,\n    Value: number?,\n    ValueChanged: ((self: Stepper, value: number) -&gt; unknown)?,\n}\n\ntype Stepper = BaseComponent &amp; Components &amp; StepperProperties &amp; {\n    Increment: () -&gt; nil,\n    Decrement: () -&gt; nil,\n}\n</code></pre>"},{"location":"Components/Stepper/#function-signature","title":"Function Signature","text":"<pre><code>function(self, properties: StepperProperties): Stepper\n</code></pre>"},{"location":"Components/Stepper/#example","title":"Example","text":"<pre><code>local stepper = row:Right():Stepper({\n    Minimum = 0,\n    Maximum = 5,\n    Step = 0.1,\n    Fielded = true,\n    Value = 3,\n    ValueChanged = function(self, value: number)\n        print(\"Value changed:\", value)\n    end,\n})\n\nprint(stepper:IsA(\"ImageLabel\")) --&gt; true\nprint(stepper.ClassName) --&gt; \"ImageLabel\"\nprint(stepper.Type) --&gt; \"Stepper\"\n\nstepper:Increment() --&gt; Value changed: 3.01\nstepper.Value += 1 --&gt; Value changed: 4.01\n</code></pre>"},{"location":"Components/Symbol/","title":"Symbol","text":"<p>A <code>Symbol</code> is a static image component mainly used to add visual context and branding to an interface.</p> <p></p>"},{"location":"Components/Symbol/#summary","title":"Summary","text":""},{"location":"Components/Symbol/#properties","title":"Properties","text":"<p>View all inherited from <code>BaseComponent</code></p> <p>View all inherited from <code>ImageLabel</code></p>"},{"location":"Components/Symbol/#methods","title":"Methods","text":"<p>View all inherited from <code>ImageLabel</code></p>"},{"location":"Components/Symbol/#events","title":"Events","text":"<p>View all inherited from <code>ImageLabel</code></p>"},{"location":"Components/Symbol/#types","title":"Types","text":"<pre><code>type SymbolProperties = ImageLabel &amp; {\n    Style: (\"Primary\" | \"Secondary\")?,\n}\n\ntype Symbol = BaseComponent &amp; Components &amp; SymbolProperties\n</code></pre>"},{"location":"Components/Symbol/#function-signature","title":"Function Signature","text":"<pre><code>function(self, properties: SymbolProperties): Symbol\n</code></pre>"},{"location":"Components/Symbol/#example","title":"Example","text":"<pre><code>local symbol = row:Right():Symbol({\n    Image = cascade.Symbols.sunMin,\n})\n\nprint(symbol:IsA(\"ImageLabel\")) --&gt; true\nprint(symbol.ClassName) --&gt; \"ImageLabel\"\nprint(symbol.Type) --&gt; \"Symbol\"\n</code></pre>"},{"location":"Components/Tab/","title":"Tab","text":"<p>A <code>Tab</code> separates content into different pages, and lets users navigate between them using a button on the sidebar.</p> <p></p>"},{"location":"Components/Tab/#summary","title":"Summary","text":""},{"location":"Components/Tab/#properties","title":"Properties","text":"Property Type Description <code>Title</code> <code>string?</code> The tab and page's title. <code>Icon</code> <code>string?</code> The <code>rbassetid://</code> of the image to display. You can use cascade.Symbols for pre-made symbols. <code>Indentation</code> <code>boolean?</code> The tab indentation/How far right it is. This is automatically increased by <code>1</code> when you chain a tab on another tab. <code>Selected</code> <code>boolean?</code> Whether or not the tab is selected by default. Defaults to false. <p>View all inherited from <code>BaseComponent</code></p> <p>View all inherited from <code>Frame</code></p>"},{"location":"Components/Tab/#methods","title":"Methods","text":"<p>View all inherited from <code>Frame</code></p>"},{"location":"Components/Tab/#events","title":"Events","text":"<p>View all inherited from <code>Frame</code></p>"},{"location":"Components/Tab/#types","title":"Types","text":"<pre><code>type TabProperties = Frame &amp; {\n    Title: string?,\n    Icon: string?,\n    Indentation: number?,\n    Selected: boolean?,\n}\n\ntype Tab = BaseComponent &amp; Components &amp; TabProperties\n</code></pre>"},{"location":"Components/Tab/#function-signature","title":"Function Signature","text":"<pre><code>function(self, properties: TabProperties): Tab\n</code></pre>"},{"location":"Components/Tab/#example","title":"Example","text":"<pre><code>local tab = section:Tab({\n    Selected = true,\n    Title = \"Tab\",\n    Icon = cascade.Symbols.squareStack3dUp,\n})\n\nprint(tab:IsA(\"Frame\")) --&gt; true\nprint(tab.ClassName) --&gt; \"Frame\"\nprint(tab.Type) --&gt; \"Tab\"\n</code></pre>"},{"location":"Components/TextField/","title":"TextField","text":"<p>A <code>TextField</code> is a rectangular area in which people enter or edit small, specific pieces of text.</p> <p></p>"},{"location":"Components/TextField/#summary","title":"Summary","text":""},{"location":"Components/TextField/#properties","title":"Properties","text":"Property Type Description <code>Placeholder</code> <code>string?</code> The text placeholder to instruct users on how to interact with the component. <code>Value</code> <code>Enum.Keycode?</code> The text in the field. <p>View all inherited from <code>BaseComponent</code></p> <p>View all inherited from <code>Frame</code></p>"},{"location":"Components/TextField/#methods","title":"Methods","text":"<p>View all inherited from <code>Frame</code></p>"},{"location":"Components/TextField/#events","title":"Events","text":"Event Signature Description <code>TextChanged</code> <code>((self: TextField, text: string) -&gt; unknown)?</code> A Callback function that is triggered when the text field's text has been modified. <code>ValueChanged</code> <code>((self: TextField, value: string) -&gt; unknown)?</code> A Callback function that is triggered when the <code>Value</code> property has been modified. <p>View all inherited from <code>Frame</code></p>"},{"location":"Components/TextField/#types","title":"Types","text":"<pre><code>type TextFieldProperties = Frame &amp; {\n    Placeholder: string?,\n    Value: string?,\n    TextChanged: ((self: TextField, text: string) -&gt; unknown)?,\n    ValueChanged: ((self: TextField, value: string) -&gt; unknown)?,\n}\n\ntype TextField = BaseComponent &amp; Components &amp; TextFieldProperties\n</code></pre>"},{"location":"Components/TextField/#function-signature","title":"Function Signature","text":"<pre><code>function(self, properties: TextFieldProperties): TextField\n</code></pre>"},{"location":"Components/TextField/#example","title":"Example","text":"<pre><code>local textField = row:Right():TextField({\n    Value = \"Label\",\n    ValueChanged = function(self, value: string)\n        print(\"Value changed:\", value)\n    end,\n    TextChanged = function(self, value: string)\n        print(\"Text changed:\", value)\n    end,\n})\n\nprint(textField:IsA(\"Frame\")) --&gt; true\nprint(textField.ClassName) --&gt; \"Frame\"\nprint(textField.Type) --&gt; \"TextField\"\n\ntextField.Value = \"Hi\" --&gt; Value changed: \"Hi\"\n</code></pre>"},{"location":"Components/TitleStack/","title":"TitleStack","text":"<p>A <code>TitleStack</code> is a vertical stack with title and subtitle label's that people can read, but not edit.</p>"},{"location":"Components/TitleStack/#summary","title":"Summary","text":""},{"location":"Components/TitleStack/#properties","title":"Properties","text":"Property Type Description <code>Title</code> <code>string?</code> The text content of the title label <code>Subtitle</code> <code>string?</code> The text content of the subtitle label. Subtitle becomes non visible if left nil. <p>View all inherited from <code>BaseComponent</code></p> <p>View all inherited from <code>Frame</code></p>"},{"location":"Components/TitleStack/#methods","title":"Methods","text":"<p>View all inherited from <code>Frame</code></p>"},{"location":"Components/TitleStack/#events","title":"Events","text":"<p>View all inherited from <code>Frame</code></p>"},{"location":"Components/TitleStack/#types","title":"Types","text":"<pre><code>type TitleStackProperties = Frame &amp; {\n    Title: string?,\n    Subtitle: string?,\n}\n\ntype TitleStack = BaseComponent &amp; Components &amp; TitleStackProperties\n</code></pre>"},{"location":"Components/TitleStack/#function-signature","title":"Function Signature","text":"<pre><code>function(self, properties: TitleStackProperties): TitleStack\n</code></pre>"},{"location":"Components/TitleStack/#example","title":"Example","text":"<pre><code>local titleStack = row:Left():TitleStack({\n    Title = \"Toggle (Off)\",\n    Subtitle = \"Lets people choose between a pair of opposing states, like on and off, using a different appearance to indicate each state.\",\n})\n\nprint(titleStack:IsA(\"Frame\")) --&gt; true\nprint(titleStack.ClassName) --&gt; \"Frame\"\nprint(titleStack.Type) --&gt; \"TitleStack\"\n</code></pre>"},{"location":"Components/Toggle/","title":"Toggle","text":"<p>A <code>Toggle</code> lets people choose between a pair of opposing states, like on and off, using a different appearance to indicate each state.</p> <p></p>"},{"location":"Components/Toggle/#summary","title":"Summary","text":""},{"location":"Components/Toggle/#properties","title":"Properties","text":"Property Type Description <code>Value</code> <code>boolean?</code> The toggle's state. <code>false</code> for off, <code>true</code> for on <p>View all inherited from <code>BaseComponent</code></p> <p>View all inherited from <code>CanvasGroup</code></p>"},{"location":"Components/Toggle/#methods","title":"Methods","text":"<p>View all inherited from <code>CanvasGroup</code></p>"},{"location":"Components/Toggle/#events","title":"Events","text":"Event Signature Description <code>ValueChanged</code> <code>((self: Toggle, value: boolean) -&gt; unknown)?</code> A callback function that is triggered when the <code>Value</code> property has been modified. <p>View all inherited from <code>CanvasGroup</code></p>"},{"location":"Components/Toggle/#types","title":"Types","text":"<pre><code>type ToggleProperties = CanvasGroup &amp; {\n    Value: boolean?,\n    ValueChanged: ((self: Toggle, value: boolean) -&gt; unknown)?,\n}\n\ntype Toggle = BaseComponent &amp; Components &amp; ToggleProperties\n</code></pre>"},{"location":"Components/Toggle/#function-signature","title":"Function Signature","text":"<pre><code>function(self, properties: ToggleProperties): Toggle\n</code></pre>"},{"location":"Components/Toggle/#example","title":"Example","text":"<pre><code>local toggle = row:Right():Toggle({\n    Value = true,\n    ValueChanged = function(self, value: boolean)\n        print(\"Value changed:\", value)\n    end,\n})\n\nprint(toggle:IsA(\"CanvasGroup\")) --&gt; true\nprint(toggle.ClassName) --&gt; \"CanvasGroup\"\nprint(toggle.Type) --&gt; \"Toggle\"\n</code></pre>"},{"location":"Components/VStack/","title":"VStack","text":"<p>A <code>VStack</code> is a frame that vertically sorts content.</p>"},{"location":"Components/VStack/#summary","title":"Summary","text":""},{"location":"Components/VStack/#properties","title":"Properties","text":"Property Type Description <code>Padding</code> <code>UDim?</code> The padding between objects. <code>HorizontalAlignment</code> <code>Enum.HorizontalAlignment?</code> The content X axis alignment. <code>VerticalAlignment</code> <code>Enum.VerticalAlignment?</code> The content Y axis alignment. <p>View all inherited from <code>BaseComponent</code></p> <p>View all inherited from <code>Frame</code></p>"},{"location":"Components/VStack/#methods","title":"Methods","text":"<p>View all inherited from <code>Frame</code></p>"},{"location":"Components/VStack/#events","title":"Events","text":"<p>View all inherited from <code>Frame</code></p>"},{"location":"Components/VStack/#types","title":"Types","text":"<pre><code>type StackProperties = Frame &amp; {\n    Padding: UDim?,\n    HorizontalAlignment: Enum.HorizontalAlignment?,\n    VerticalAlignment: Enum.VerticalAlignment?,\n}\n\ntype Stack = BaseComponent &amp; Components &amp; StackProperties\n</code></pre>"},{"location":"Components/VStack/#function-signature","title":"Function Signature","text":"<pre><code>function(self, properties: StackProperties): Stack\n</code></pre>"},{"location":"Components/VStack/#example","title":"Example","text":"<pre><code>local vStack = row:Right():VStack()\n\nprint(vStack:IsA(\"Frame\")) --&gt; true\nprint(vStack.ClassName) --&gt; \"Frame\"\nprint(vStack.Type) --&gt; \"VStack\"\n</code></pre>"},{"location":"Components/Window/","title":"Window","text":"<p><code>Window</code> is a high-level container that handles all base interaction with the user for you. Usually this is the first component called and most components stem from here.</p> <p></p>"},{"location":"Components/Window/#summary","title":"Summary","text":""},{"location":"Components/Window/#properties","title":"Properties","text":"Property Type Description <code>Searching</code> <code>boolean?</code> Shows a text field in the title bar which can be used to search pages for content. <code>Draggable</code> <code>boolean?</code> Enables window dragging via mouse or touch device. <code>Resizable</code> <code>boolean?</code> Enables resizing via sides or corners. <code>Title</code> <code>string?</code> Title displayed in the content titlebar. <code>Subtitle</code> <code>string?</code> Subtitle displayed under the title. Will be visually disabled if not defined. <code>Maximized</code> <code>boolean?</code> Should the window be maximized by default? <code>Minimized</code> <code>boolean?</code> Should the window be minimized by default? <code>Dropshadow</code> <code>boolean?</code> Enables a dropshadow effect on the window. <code>UIBlur</code> <code>boolean?</code> Applies a background blur effect to the sidebar. <p>View all inherited from <code>BaseComponent</code></p> <p>View all inherited from <code>Frame</code></p>"},{"location":"Components/Window/#methods","title":"Methods","text":"<p>View all inherited from <code>Frame</code></p>"},{"location":"Components/Window/#events","title":"Events","text":"<p>View all inherited from <code>Frame</code></p>"},{"location":"Components/Window/#types","title":"Types","text":"<pre><code>type WindowProperties = Frame &amp; {\n    Searching: boolean?,\n    Draggable: boolean?,\n    Resizable: boolean?,\n    Title: string?,\n    Subtitle: string?,\n    Maximized: boolean?,\n    Minimized: boolean?,\n\n    -- These effects can be system resource intensive.\n    Dropshadow: boolean?,\n    UIBlur: boolean?, -- Detectable in some games.\n}\n\ntype Window = BaseComponent &amp; Components &amp; WindowProperties\n</code></pre>"},{"location":"Components/Window/#function-signature","title":"Function Signature","text":"<pre><code>function(self, properties: WindowProperties): Window\n</code></pre>"},{"location":"Components/Window/#example","title":"Example","text":"<pre><code>local window = app:Window({\n    Title = \"Cascade\",\n    Subtitle = \"This is my subtitle.\",\n})\n\nprint(window:IsA(\"Frame\")) --&gt; true\nprint(window.ClassName) --&gt; \"Frame\"\nprint(window.Type) --&gt; \"Window\"\n</code></pre>"},{"location":"Getting%20Started/creating-an-application/","title":"Creating an Application","text":"<p>You can create a new app by calling the <code>New</code> method from the Cascade API. This returns a custom object merged with a <code>ScreenGui</code>.</p> <p>The returned object exposes all built-in components such as <code>Window</code>, <code>Tab</code>, and others for UI composition.</p>"},{"location":"Getting%20Started/creating-an-application/#summary","title":"Summary","text":""},{"location":"Getting%20Started/creating-an-application/#properties","title":"Properties","text":"Property Type Description WindowPill <code>boolean?</code> Whether or not the window minimize/restore pill should be visible. Theme <code>Theme?</code> Defines the color pallete used by the overall application. <p>View all inherited from ScreenGui</p>"},{"location":"Getting%20Started/creating-an-application/#methods","title":"Methods","text":"<p>View all inherited from ScreenGui</p>"},{"location":"Getting%20Started/creating-an-application/#events","title":"Events","text":"<p>View all inherited from ScreenGui</p>"},{"location":"Getting%20Started/creating-an-application/#types","title":"Types","text":"<pre><code>type AppProperties = ScreenGui &amp; {\n    WindowPill: boolean?,\n    Theme: Theme?,\n}\n\ntype App = AppProperties &amp; Components\n</code></pre>"},{"location":"Getting%20Started/creating-an-application/#function-signature","title":"Function Signature","text":"<pre><code>function(self, properties: AppProperties): App\n</code></pre>"},{"location":"Getting%20Started/creating-an-application/#example","title":"Example","text":"<pre><code>local app = cascade.New({\n    WindowPill = true,\n    Theme = cascade.Themes.Light\n})\n</code></pre>"},{"location":"Getting%20Started/example/","title":"Example","text":"<p>View a example application that can be made with Cascade.</p> <p>Note</p> <p>You can view a larger test application here which has full keybind minimization and mobile resize already added: tests/test.luau</p>"},{"location":"Getting%20Started/example/#creating-a-basic-app","title":"Creating a basic app","text":""},{"location":"Getting%20Started/example/#code","title":"Code","text":"<pre><code>-- (1)\n\n-- Create our main application.\nlocal app = cascade.New({ Theme = cascade.Themes.Light })\n\ndo -- Make the main window\n    local window = app:Window({\n        Title = \"My Window\",\n        Subtitle = \"My window\",\n    })\n\n    do -- Make a static tab section\n        local section = window:Section({ Title = \"Section title\" })\n\n        do -- Make our main tab\n            local tab = section:Tab({\n                Selected = true,\n                Title = \"Main\",\n                Icon = cascade.Symbols.squareStack3dUp,\n            })\n\n            do\n                local form = tab:Form()\n\n                do -- Make the toggle\n                    local row = form:Row()\n\n                    -- You can of course add a wrapper to simplify creating page components if you only want a title stack and a component to go along.\n                    row:Left():TitleStack({\n                        Title = \"Toggle\",\n                        Subtitle = \"My toggle\",\n                    })\n\n                    row:Right():Toggle()\n                end\n\n                do -- Make the button\n                    local row = form:Row()\n\n                    row:Left():TitleStack({\n                        Title = \"Button\",\n                        Subtitle = \"My button\",\n                    })\n\n                    row:Right():Button({ Label = \"Click me\" })\n                end\n            end\n        end\n    end\nend\n</code></pre> <ol> <li>This assumes you already have cascade imported and defined as <code>cascade</code> above this.</li> </ol>"},{"location":"Getting%20Started/example/#result","title":"Result","text":""},{"location":"Getting%20Started/example/#adding-a-settings-page","title":"Adding a settings page","text":""},{"location":"Getting%20Started/example/#code_1","title":"Code","text":"<p>Add this below the existing tab.</p> <pre><code>do -- Window\n    local tab = section:Tab({\n        Title = \"Window\",\n        Icon = cascade.Symbols.sidebarLeft,\n    })\n\n    do -- Appearance\n        local form = tab:PageSection({ Title = \"Appearance\" }):Form() -- (1)\n\n        do -- Dark mode\n            local row = form:Row({\n                SearchIndex = \"Dark mode\",\n            })\n\n            row:Left():TitleStack({\n                Title = \"Dark mode\",\n                Subtitle = \"Dark Mode is a application appearance setting that uses a dark color palette to provide a comfortable viewing experience tailored for low-light environments.\",\n            })\n\n            row:Right():Toggle({\n                Value = app.Theme == cascade.Themes.Dark,\n                ValueChanged = function(self, value: boolean)\n                    app.Theme = value and cascade.Themes.Dark or cascade.Themes.Light\n                end,\n            })\n        end\n    end\n\n    do -- Input\n        local form = tab:PageSection({ Title = \"Input\" }):Form()\n\n        do -- Searching\n            local row = form:Row({\n                SearchIndex = \"Searchable\",\n            })\n\n            row:Left():TitleStack({\n                Title = \"Searchable\",\n                Subtitle = \"Allows pages to be searched using a text field in the title bar.\",\n            })\n\n            row:Right():Toggle({\n                Value = window.Searching,\n                ValueChanged = function(self, value: boolean)\n                    window.Searching = value\n                end,\n            })\n        end\n\n        do -- Draggable\n            local row = form:Row({\n                SearchIndex = \"Draggable\",\n            })\n\n            row:Left():TitleStack({\n                Title = \"Draggable\",\n                Subtitle = \"Allows users to move the window with a mouse or touch device.\",\n            })\n\n            row:Right():Toggle({\n                Value = window.Draggable,\n                ValueChanged = function(self, value: boolean)\n                    window.Draggable = value\n                end,\n            })\n        end\n\n        do -- Resizable\n            local row = form:Row({\n                SearchIndex = \"Resizable\",\n            })\n\n            row:Left():TitleStack({\n                Title = \"Resizable\",\n                Subtitle = \"Allows users to resize the window with a mouse or touch device.\",\n            })\n\n            row:Right():Toggle({\n                Value = window.Resizable,\n                ValueChanged = function(self, value: boolean)\n                    window.Resizable = value\n                end,\n            })\n        end\n    end\n\n    do -- Effects\n        local form = tab:PageSection({\n            Title = \"Effects\",\n            Subtitle = \"These effects may be resource intensive across different systems.\",\n        }):Form()\n\n        do -- Dropshadow\n            local row = form:Row({\n                SearchIndex = \"Dropshadow\",\n            })\n\n            row:Left():TitleStack({\n                Title = \"Dropshadow\",\n                Subtitle = \"Enables a dropshadow effect on the window.\",\n            })\n\n            row:Right():Toggle({\n                Value = window.Dropshadow,\n                ValueChanged = function(self, value: boolean)\n                    window.Dropshadow = value\n                end,\n            })\n        end\n\n        do -- UI Blur\n            local row = form:Row({\n                SearchIndex = \"Background blur\",\n            })\n\n            row:Left():TitleStack({\n                Title = \"Background blur\",\n                Subtitle = \"Enables a UI background blur effect on the window. This can be detectable in some games.\",\n            })\n\n            row:Right():Toggle({\n                Value = window.UIBlur,\n                ValueChanged = function(self, value: boolean)\n                    window.UIBlur = value\n                end,\n            })\n        end\n    end\nend\n</code></pre> <ol> <li>You can create a page section to organize forms, which helps the reader quickly scan over content in a tab to see what they need to do.</li> </ol>"},{"location":"Getting%20Started/example/#result_1","title":"Result","text":""},{"location":"Getting%20Started/importing-the-library/","title":"Importing the Library","text":"<p>Note that you can clone the entire Cascade repo into your project using something similar to wally, but this can be unstable.</p>"},{"location":"Getting%20Started/importing-the-library/#pre-built-releases","title":"Pre-built releases","text":"<p>Cascade also has pre-built <code>luau</code> modules.</p>"},{"location":"Getting%20Started/importing-the-library/#over-http","title":"Over HTTP","text":"<p>This method will download the release dynamically using HttpGet.</p> <pre><code>local function import(owner, release, version, file)\n    local tag = (version == \"latest\" and \"latest\" or \"download/\"..version)\n\n    return loadstring(game:HttpGet((\"https://github.com/%s/%s/releases/%s/%s\"):format(owner, release, tag, file)), file)()\nend\n\nlocal cascade = import(\"biggaboy212\", \"Cascade\", \"latest\", \"dist.luau\")\n-- If you want to use a specific release (i.e, beta releases), replace 'latest' with it's release tag.\n</code></pre>"},{"location":"Getting%20Started/importing-the-library/#local-build","title":"Local Build","text":"<ol> <li> <p>Download a valid release:</p> <p>Cascade Releases</p> </li> <li> <p>Place the <code>luau</code> module into your project (e.g., under <code>packages/</code>).</p> </li> </ol>"},{"location":"Getting%20Started/interface-guidelines/","title":"Interface Guidelines","text":"<p>For more information about Cascade\u2019s Human Interface Guidelines, refer to Apple\u2019s Official HIG documentation, which Cascade is based on.</p>"},{"location":"Getting%20Started/interface-guidelines/#why-is-this-important","title":"Why is this important?","text":"<p>Following established interface guidelines is essential to building high-quality user interfaces. While visually appealing components are important, it's equally critical to understand how and when to use them.</p> <p>Cascade adopts Apple's Human Interface Guidelines to promote consistency, clarity, and intentional design. By understanding these principles, you can create polished interfaces that are consistent with a user's everyday interface navigation experience. Knowing how to use components correctly leads to better user experiences and more maintainable UI systems.</p>"},{"location":"Getting%20Started/the-api/","title":"The API","text":""},{"location":"Getting%20Started/the-api/#summary","title":"Summary","text":""},{"location":"Getting%20Started/the-api/#properties","title":"Properties","text":"Property Type Description <code>Themes</code> <code>{ Dark: { [any]: any }, Light { [any]: any }</code> [Read-only] A list of predefined themes, which by default includes <code>Dark</code> and <code>Light</code>. <code>Symbols</code> <code>{ [string]: string }</code> [Read-only] A large list of symbols (Exported from Apple SF Symbols). <p>Tip</p> <p>You can view all symbols here: https://sf-symbols-one.vercel.app/</p>"},{"location":"Getting%20Started/the-api/#methods","title":"Methods","text":"Method Arguments Description Returns <code>New</code> <code>properties: AppProperties</code> Creates a new <code>App</code>, this returns every component you can then call and will appear on screen. <code>App</code>"}]}